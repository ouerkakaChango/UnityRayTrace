// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Trace
#pragma kernel Render

#include  "../HLSL/CommonDef.hlsl"
#include "../HLSL/TransferMath/TransferMath.hlsl"

int w;
int h;

RWTexture2D<float4> Result;
RWTexture2D<float4> envRT;

RWStructuredBuffer<Ray> mainRays;

//#########################################################################################################
int Inx2D(int i, int j)
{
	return i + w * j;
}
//#########################################################################################################
float3 screenLeftDownPix;
float3 eyePos;
float pixW;
float pixH;
float3 screenU;
float3 screenV;
[numthreads(8, 8, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	Ray ray;
	ray.pos = screenLeftDownPix + screenU * i * pixW + screenV * j * pixH;
	ray.dir = normalize(ray.pos - eyePos); 

	mainRays[Inx2D(i,j)] = ray;

	Result[id.xy] = float4(ray.dir,1);
}
//#########################################################################################################
#include  "../HLSL/RayMath.hlsl"

[numthreads(8, 8, 1)]
void Trace(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	Ray ray = mainRays[Inx2D(i, j)];

	float3 re = 0.1;

	//???unity到底是怎么确定视线取skySphere的哪个点？
	//1.将ray与超大sphere求交，获取sphere上的point
	//2.将ray的起点移到(0,0,0)。也就是ray.dir即是交点
	//先尝试方案2.因为好像没看见哪里设置skysphere的大小

	float2 uv = EquirectangularToUV(ray.dir);
	//re = float3(uv, 0);
	uint envTexW, envTexH;
	envRT.GetDimensions(envTexW, envTexH);
	re = envRT[uv*float2(envTexW, envTexH)];
	Result[id.xy] = float4(re, 1);
}

//#########################################################################################################
[numthreads(8, 8, 1)]
void Render(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	Ray ray;
	ray.pos = screenLeftDownPix + screenU * i * pixW + screenV * j * pixH;
	ray.dir = normalize(ray.pos - eyePos);

	
	float3 re = 0.1;

	//???unity到底是怎么确定视线取skySphere的哪个点？
	//1.将ray与超大sphere求交，获取sphere上的point
	//2.将ray的起点移到(0,0,0)。也就是ray.dir即是交点
	//先尝试方案2.因为好像没看见哪里设置skysphere的大小

	float2 uv = EquirectangularToUV(ray.dir);
	uint envTexW, envTexH;
	envRT.GetDimensions(envTexW, envTexH);
	re = envRT[uv*float2(envTexW, envTexH)];

	//re = float3(uv, 0);
	Result[id.xy] = float4(re, 1);
}