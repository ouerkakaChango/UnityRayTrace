// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Trace

#include  "../HLSL/CommonDef.hlsl"

#define PI 3.14159f

RWTexture2D<float4> Result;
int w;
int h;

RWStructuredBuffer<Ray> mainRays;

//#########################################################################################################
int Inx2D(int i, int j)
{
	return i + w * j;
}
//#########################################################################################################
float3 screenLeftDownPix;
float3 eyePos;
float pixW;
float pixH;
float3 screenU;
float3 screenV;
[numthreads(8, 8, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	Ray ray;
	ray.pos = screenLeftDownPix + screenU * i * pixW + screenV * j * pixH;
	ray.dir = normalize(ray.pos - eyePos); 

	mainRays[Inx2D(i,j)] = ray;

	Result[id.xy] = float4(ray.dir,1);
}
//#########################################################################################################
#include  "../HLSL/RayMath.hlsl"

[numthreads(8, 8, 1)]
void Trace(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	Ray ray = mainRays[Inx2D(i, j)];

	float3 re = 0;
	

	Result[id.xy] = float4(re, 1);
}