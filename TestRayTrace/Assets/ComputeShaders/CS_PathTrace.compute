// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitRaysBlock
#pragma kernel TraceBlock
#pragma kernel BounceBlock
#pragma kernel RenderBlock
#pragma kernel Filter

//根据网上资料，N卡最小也有32threads，A卡64
//所以 Use 64 threads (e.g. (64, 1, 1), (8, 8, 1), (16, 2, 2) etc.)
//threads数量过低会慢很多
#define CoreX 8
#define CoreY 8

#define PI 3.14159f

int BI;

RWTexture2D<float4> Result;

int SPP;
int w;
int h;
int cw;
int ch;
int blockX;
int blockY;

struct Ray
{
	float3 pos;
	float3 dir;
};
RWStructuredBuffer<Ray> mainRays;
RWStructuredBuffer<Ray> subRays;

struct HitInfo
{
	int bHit;
	int obj;
	float3 N;
	float3 P;
};
RWStructuredBuffer<HitInfo> hitInfos;
RWStructuredBuffer<HitInfo> mainHits;
RWStructuredBuffer<HitInfo> subHits;

struct Light
{
	float3 color;
};

struct PathInfo
{
	int hasEnd;
	int endInx;
};

RWStructuredBuffer<PathInfo> mainPaths;
RWStructuredBuffer<PathInfo> subPaths;

#include  "../HLSL/Random/RandUtility.hlsl"
#include "../HLSL/SDF/SDFScene.hlsl"
#include "../HLSL/Render/Light.hlsl"
#include "../HLSL/Render/PBR.hlsl"

int Inx2D(int i, int j)
{
	return i + cw * j;
}

int Inx3D(int i, int j, int k)
{
	return i + cw * j + cw * ch*k;
}

int Inx4D(int i, int j, int k, int bounceInx)
{
	return i + cw * j + cw * ch*k + cw*ch*SPP * bounceInx;
}

float2 Inx_img(int i, int j)
{
	return float2(i+ blockX * cw,j+ blockY * ch);
}

//#########################################################################################################
[numthreads(CoreX, CoreY, 1)]
void InitRaysBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	float3 screenPos = float3(0, 0, 0);
	float3 eyeOffset = float3(0, 0, 1);
	float dx = 2.0f / w;
	float ylen = dx * h;
	float3 screenLeftDownPos = float3(-1, -ylen / 2, 0) + 0.5f*float3(dx, dx, 0);
	float3 blockOffset = float3(blockX*cw*dx, blockY*ch*dx, 0);

	Ray ray;
	HitInfo hit;
	PathInfo path;
	path.hasEnd = 0;
	path.endInx = 0;
	//######################## 
	ray.pos = screenPos + screenLeftDownPos + float3(i*dx, j*dx, 0) + blockOffset;
	ray.dir = ray.pos - screenPos - eyeOffset; //默认eyePos在屏幕后一单位，z轴向屏幕外为(0,0,1)

	SDFScene(ray,hit);

	//??? debug
	//if (hit.bHit == -1)
	//{
	//	Result[Inx_img(i, j)] = float4(1, 0, 0, 0);
	//	return;
	//}
	//else if (hit.bHit == -2)
	//{
	//	Result[Inx_img(i, j)] = float4(0, 1, 0, 0);
	//	return;
	//}

	if (hit.bHit <= 0)
	{
		path.hasEnd = 1;
		for (int k = 0; k < SPP; k++)
		{
			PathInfo subPath;
			subPath.hasEnd = 1;
			subPath.endInx = -1;
			subPaths[Inx3D(i, j, k)] = subPath;
		}
	}
	else
	{
		//在hit上初始化SPP个subRay
		for (int k = 0; k < SPP; k++)
		{
			Ray subRay;
			float3 seed = hit.P + float3(i, j, k) + float3(blockX, blockY, 0);

			//{//type1
			//	//subRay.dir = hit.N;//normalize(randP_round(seed) + hit.N);
			//}
			//{//type2 uni 
			//	//subRay.dir = toNormalHemisphere(randP_hemiRound(seed), hit.N);
			//}

			//!!! 根据roughness决定采用什么样的IS
			float r = GetObjMaterial_PBR(hit.obj).roughness;
			if(r<0.5f)
			{//type3 Importance Sample (GGX NDF2)
				//1.prepare a
				float a = max(0.001f, r*r);
				//2.sample h 
				float x1 = rand01(seed);
				float x2 = rand01(seed.zxy);
				float phi = 2 * PI*x1;
				float costheta = sqrt((1 - x2) / (1 + (a*a - 1)*x2));
				float sintheta = sqrt(max(0.0, 1.0 - costheta * costheta)); //防止极限误差 -0.00000x
				float3 H = float3(
					sintheta*cos(phi),
					sintheta*sin(phi),
					costheta);
				H = toNormalHemisphere(H, hit.N);
				subRay.dir = reflect(ray.dir, H);
			}
			else{
				//type4 Importance Sample (Diffuse)
				//1.prepare a
				Material_PBR param = GetObjMaterial_PBR(hit.obj);
				float a = max(0.001f, r*r);
				//2.sample h 
				float x1 = rand01(seed);
				float x2 = rand01(seed.zxy);
				float r = sqrt(x1);
				float theta = x2 * 2 * PI;
				float x = r * cos(theta);
				float y = r * sin(theta);
				float z = sqrt(1 - x * x - y * y);
				float3 H = float3(x, y, z);
				H = toNormalHemisphere(H, hit.N);
				subRay.dir = reflect(ray.dir, H);
			}
			subRay.pos = hit.P;
			subRays[Inx3D(i, j, k)] = subRay;

			PathInfo subPath;
			subPath.hasEnd = 0;
			subPath.endInx = -1;
			subPaths[Inx3D(i, j, k)] = subPath;
		}
	}
	//######################## 
	//end
	mainRays[Inx2D(i,j)] = ray;
	mainHits[Inx2D(i, j)] = hit;
	mainPaths[Inx2D(i, j)] = path;

	float3 re = 0;
	re = hit.N;
	//re = path.hasEnd;
	Result[Inx_img(i, j)] = float4(re, 0);
}
//#########################################################################################################
int traceInx;
int SPP_cell;
[numthreads(CoreX, CoreY, 1)]
void TraceBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	PathInfo mainPath = mainPaths[Inx2D(i, j)];
	if (mainPath.hasEnd == 1)
	{
		return;
	}
	HitInfo hit;// = subHits[Inx4D(i, j, 0, BI)];
	//######################## 

	for (int k = traceInx*SPP_cell; k < (traceInx+1)*SPP_cell; k++)
	{
		PathInfo path = subPaths[Inx3D(i, j, k)];
		if (path.hasEnd == 1)
		{
			continue;
		}

		Ray ray = subRays[Inx3D(i,j,k)];
		SDFScene(ray, hit);
		//??? debug
		//if (hit.bHit == -1)
		//{
		//	Result[Inx_img(i, j)] = float4(1,0,0,0);
		//	return;
		//}
		//else if (hit.bHit == -2)
		//{
		//	Result[Inx_img(i, j)] = float4(0, 1, 0, 0);
		//	return;
		//}
		//else if (hit.bHit == -3)
		//{
		//	Result[Inx_img(i, j)] = float4(1, 0, 1, 0);
		//	return;
		//}
		if (hit.bHit <= 0)
		{
			path.hasEnd = 1;
			path.endInx = -1;
		}
		else if (rgbSum(GetObjEmissive(hit.obj)) > 0)
		{
			path.hasEnd = 1;
			path.endInx = BI;
		}
		subPaths[Inx3D(i, j, k)] = path;
		subHits[Inx4D(i, j, k, BI)] = hit;
	}
	//######################## 
	float3 re = float3(0, 0, 0);
	//re = subRays[Inx3D(i, j, 0)].dir;
	re = subHits[Inx4D(i, j, 0, BI)].P;
	//re = subPaths[Inx3D(i, j, k)].hasEnd;
	Result[Inx_img(i, j)] = float4(re, 0);
}
//############################################################################
[numthreads(CoreX, CoreY, 1)]
void BounceBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;
	PathInfo mainPath = mainPaths[Inx2D(i, j)];
	if (mainPath.hasEnd == 1)
	{
		return;
	}
	//######################## 
	for (int k = 0; k < SPP; k++)
	{
		PathInfo path = subPaths[Inx3D(i, j, k)];
		if (path.hasEnd == 1)
		{
			continue;
		}
		Ray ray = subRays[Inx3D(i, j, k)];
		HitInfo hit = subHits[Inx4D(i, j, k, BI)];
		float3 seed = hit.P + float3(i, j, k) + float3(blockX, blockY, 0);
		Material_PBR param = GetObjMaterial_PBR(hit.obj);
		{
			float3 ref = reflect(ray.dir, hit.N);
			ray.dir = normalize(randP_round(seed) + ref);
		}
		{
			//不能太扁平了，不然永远出不去sdf-thre
			//ray.dir = toNormalHemisphere(randP_hemiRound(seed), hit.N);
		}
		subRays[Inx3D(i, j, k)] = ray;
	}
	//######################## 
	//end
	float3 re = float3(0, 0, 0);
	re = subRays[Inx3D(i, j, 0)].dir;
	//re = subHits[Inx4D(i, j, 0, BI)].P;
	Result[Inx_img(i, j)] = float4(re, 0);
}
//############################################################################

//#################################################################
Light ShadeSublight(Light light, HitInfo preHit, HitInfo hit, HitInfo nextHit)
{
	float3 Li = GetAttenuationed(light.color, hit.P, nextHit.P);
	Material_PBR param = GetObjMaterial_PBR(hit.obj);
	float3 V = normalize(preHit.P - hit.P);
	float3 L = normalize(nextHit.P - hit.P);
	float3 c = PBR_GGX(param, hit.N, V, L, Li);

	Light re;
	//??? 反射系数
	re.color = GetObjEmissive(hit.obj) + c*0.98f;
	return re;
}

[numthreads(CoreX, CoreY, 1)]
void RenderBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	PathInfo mainPath = mainPaths[Inx2D(i, j)];
	if (mainPath.hasEnd == 1)
	{
		Result[Inx_img(i, j)] = float4(0,0,0, 0);
		return;
	}

	int k = 0;
	float3 finalColor = 0;
	HitInfo mainHit = mainHits[Inx2D(i,j)];
	Ray mainRay = mainRays[Inx2D(i, j)];
	//######################## 
	Material_PBR mainParam = GetObjMaterial_PBR(mainHit.obj);
	float a = mainParam.roughness;
	a = max(0.001f, a*a);

	for (k = 0; k < SPP; k++)
	{
		Light light;
		light.color = 0;
		PathInfo path = subPaths[Inx3D(i, j, k)];
		if (path.endInx <0)
		{
			continue;
		}
		for (int inx = path.endInx; inx >= 0; inx--)
		{
			HitInfo hit = subHits[Inx4D(i,j,k,inx)];
			if (inx == path.endInx)
			{
				light.color = GetObjEmissive(hit.obj);
			}
			else if (inx == 0)
			{
				HitInfo preHit = mainHits[Inx2D(i, j)];
				HitInfo nextHit = subHits[Inx4D(i, j, k, inx + 1)];
				light = ShadeSublight(light, preHit, hit, nextHit);
			}
			else
			{
				HitInfo preHit = subHits[Inx4D(i, j, k, inx - 1)];
				HitInfo nextHit = subHits[Inx4D(i, j, k, inx + 1)];
				light = ShadeSublight(light, preHit, hit, nextHit);
			}
		}

		//2.??? 根据表面材质决定IS类型
		{			
			HitInfo firstHit = subHits[Inx4D(i, j, k, 0)];
			float3 N = mainHit.N;
			float3 V = -mainRay.dir;
			float3 L = normalize(firstHit.P - mainHit.P);
			float3 Li = GetAttenuationed(light.color, mainHit.P, firstHit.P);
			Material_PBR param = GetObjMaterial_PBR(mainHit.obj);
			float pdf = 1;
			float r = param.roughness;
			{
				//type1
				//pdf = 1/(2*PI);

				//!!! 根据roughness决定采用什么样的IS-pdf
				float3 H = normalize(V + L);
				float NdotH = dot(N, H);//max(dot(N, H), 0.0);
				if(r<0.5f)
				{//type3 Importance Sample(NDF2)	
					float a = max(0.001f, r*r);
					float theta = acos(dot(N, H));
					float c = cos(theta);
					
					float nomi = a * a * c;
					float NdotH2 = NdotH * NdotH;

					float denom = (NdotH2 * (a*a - 1.0) + 1.0);
					denom = PI * denom * denom;
					pdf /= 4 * dot(L, H);//saturate(dot(L, H));
				}
				else{//type4 Importance Sample(Diffuse)
					pdf = dot(N, H) / PI;
				}
			}
			finalColor += PBR_GGX(param, N, V, L, Li)/pdf;
		}
	}
	finalColor = finalColor / SPP;
	finalColor += GetObjEmissive(mainHit.obj);
	//??? 
	finalColor = pow(abs(finalColor), 1.0f / 2.2f);
	//######################## 
	//end
	float3 re = 0; 
	re = finalColor;

	Result[Inx_img(i, j)] = float4(re, 0);
}

float GetGrey(float3 c)
{
	return c.r*0.3 + c.g*0.6 + c.b*0.1;
}

void swap(inout float a, inout float b)
{
	float tt = a;
	a = b;
	b = tt;
}

void swap(inout float3 a, inout float3 b)
{
	float3 tt = a;
	a = b;
	b = tt;
}

[numthreads(CoreX, CoreY, 1)]
void Filter(uint3 id : SV_DispatchThreadID)
{
	int x = id.x;
	int y = id.y;
	float4 oriColor = Result[id.xy];
	
	float grey[9];
	float3 colors[9];
	int count = 0;
	for (int j = -1; j <= 1; j++)
	{
		for (int i = -1; i <= 1; i++)
		{
			colors[count] = Result[float2(x + i, y + j)].xyz;
			float tt = GetGrey(colors[count]);
			grey[count] = tt;
			count += 1;
		}
	}

	//希尔排序
	for (float gap = 9 / 2.0f; gap > 0; gap /= 2.0f)
	{
		for (int i = gap; i < 9; ++i) 
		{
			for (int j = i - gap; j >= 0 && grey[j] > grey[j + gap]; j -= gap)
			{
				swap(grey[j], grey[j + gap]);
				swap(colors[j], colors[j + gap]);
			}
		}
	}
		
	//######################## 
	//end
	float3 re = 0; 
	//re.yz = oriColor.yz;
	re = colors[4];
	Result[id.xy] = float4(re, 0);
}