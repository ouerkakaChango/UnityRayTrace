// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitRaysBlock
#pragma kernel TraceBlock
#pragma kernel BounceBlock
#pragma kernel RenderBlock
#pragma kernel Filter

//根据网上资料，N卡最小也有32threads，A卡64
//所以 Use 64 threads (e.g. (64, 1, 1), (8, 8, 1), (16, 2, 2) etc.)
//threads数量过低会慢很多
#define CoreX 8
#define CoreY 8

#define PI 3.14159f

int BI;

RWTexture2D<float4> Result;

int SPP;
int w;
int h;
int cw;
int ch;
int blockX;
int blockY;

struct Ray
{
	float3 pos;
	float3 dir;
};
RWStructuredBuffer<Ray> mainRays;
RWStructuredBuffer<Ray> subRays;

struct HitInfo
{
	int bHit;
	int obj;
	float3 N;
	float3 P;
};
RWStructuredBuffer<HitInfo> hitInfos;
RWStructuredBuffer<HitInfo> mainHits;
RWStructuredBuffer<HitInfo> subHits;

struct Light
{
	float3 color;
};

struct PathInfo
{
	int hasEnd;
	int endInx;
};

RWStructuredBuffer<PathInfo> mainPaths;
RWStructuredBuffer<PathInfo> subPaths;

#include  "../HLSL/Random/RandUtility.hlsl"
#include "../HLSL/SDF/SDFScene.hlsl"
#include "../HLSL/Render/Light.hlsl"
#include "../HLSL/Render/PBR.hlsl"

int Inx2D(int i, int j)
{
	return i + cw * j;
}

int Inx3D(int i, int j, int k)
{
	return i + cw * j + cw * ch*k;
}

int Inx4D(int i, int j, int k, int bounceInx)
{
	return i + cw * j + cw * ch*k + cw*ch*SPP * bounceInx;
}

float2 Inx_img(int i, int j)
{
	return float2(i+ blockX * cw,j+ blockY * ch);
}

//#########################################################################################################
[numthreads(CoreX, CoreY, 1)]
void InitRaysBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	float3 screenPos = float3(0, 0, 0);
	float3 eyeOffset = float3(0, 0, 1);
	float dx = 2.0f / w;
	float ylen = dx * h;
	float3 screenLeftDownPos = float3(-1, -ylen / 2, 0) + 0.5f*float3(dx, dx, 0);
	float3 blockOffset = float3(blockX*cw*dx, blockY*ch*dx, 0);

	Ray ray;
	HitInfo hit;
	PathInfo path;
	path.hasEnd = 0;
	path.endInx = -1;
	//######################## 
	ray.pos = screenPos + screenLeftDownPos + float3(i*dx, j*dx, 0) + blockOffset;
	ray.dir = ray.pos - screenPos - eyeOffset; //默认eyePos在屏幕后一单位，z轴向屏幕外为(0,0,1)

	SDFScene(ray,hit);

	//??? debug
	//if (hit.bHit == -1)
	//{
	//	Result[Inx_img(i, j)] = float4(1, 0, 0, 0);
	//	return;
	//}
	//else if (hit.bHit == -2)
	//{
	//	Result[Inx_img(i, j)] = float4(0, 1, 0, 0);
	//	return;
	//}

	if (hit.bHit <= 0)
	{
		path.hasEnd = 1;
		for (int k = 0; k < SPP; k++)
		{
			PathInfo subPath;
			subPath.hasEnd = 1;
			subPath.endInx = -1;
			subPaths[Inx3D(i, j, k)] = subPath;
		}
	}
	else if (rgbSum(GetObjEmissive(hit.obj)) > 0)
	{
		path.hasEnd = 2;
		for (int k = 0; k < SPP; k++)
		{
			PathInfo subPath;
			subPath.hasEnd = 1;
			subPath.endInx = -1;
			subPaths[Inx3D(i, j, k)] = subPath;
		}
	}
	else
	{
		//在hit上初始化SPP个subRay
		for (int k = 0; k < SPP; k++)
		{
			Ray subRay;
			float3 seed = normalize(hit.P+float3(0,0,2.5)) + float3(i, j, k) + float3(blockX, blockY, 0);

			//{//type1
			//	//subRay.dir = hit.N;//normalize(randP_round(seed) + hit.N);
			//}
			//{//type2 uni 
			//	//subRay.dir = toNormalHemisphere(randP_hemiRound(seed), hit.N);
			//}

			//根据辐射度决定用什么样的采样
			//https://blog.csdn.net/weixin_44176696/article/details/119988866
			Material_PBR param = GetObjMaterial_PBR(hit.obj);
			float r = param.roughness;
			// 辐射度统计
			float r_diffuse = (1.0 - param.metallic);
			float r_specular = 1.0;
			//float r_clearcoat = 0.25 * material.clearcoat;
			//float r_sum = r_diffuse + r_specular + r_clearcoat;
			//--- 临时修改：无清漆项
			float r_sum = r_diffuse + r_specular;
			//___

			// 根据辐射度计算概率
			float p_diffuse = r_diffuse / r_sum;
			float p_specular = r_specular / r_sum;
			//float p_clearcoat = r_clearcoat / r_sum;

			// 按照概率采样
			float rd = rand01(seed.zyx);
			// 漫反射
			if (rd <= p_diffuse) {
				//float2 pix = Inx_img(i, j);
				//float2 tt = randfloat2(w, h, (int)pix.x, (int)pix.y, (uint)(seed.x + seed.z), (uint)seed.y % 4);
				//subRay.dir = IS_SampleDiffuse(hit.N, r, tt.x, tt.y);

				subRay.dir = IS_SampleDiffuse(hit.N, r, rand01(seed), rand01(seed.zxy*PI*seed));
			}
			// 镜面反射
			else if (p_diffuse < rd && rd <= p_diffuse + p_specular) {
				//float2 pix = Inx_img(i, j);
				//float2 tt = randfloat2(w, h, (int)pix.x, (int)pix.y, (uint)(seed.x + seed.z), (uint)seed.y %4);
				//subRay.dir = IS_SampleSpecular(ray.dir, hit.N, r, tt.x, tt.y);

				subRay.dir = IS_SampleSpecular(ray.dir, hit.N, r, rand01(seed), rand01(seed.zxy*PI*seed));
			}
			else
			{//!!!
				subRay.dir = IS_SampleDiffuse(hit.N, r, rand01(seed), rand01(seed.zxy*PI*seed));
			}
			
			
			//if(r<0.5f)
			//{	//type3 Importance Sample (GGX NDF2)
			//	//1.prepare a
			//	float a = max(0.001f, r*r);
			//	//2.sample h 
			//	float x1 = rand01(seed);
			//	float x2 = rand01(seed.zyx);
			//	float phi = 2 * PI*x1;
			//	float costheta = sqrt((1 - x2) / (1 + (a*a - 1)*x2));
			//	float sintheta = sqrt(max(0.0, 1.0 - costheta * costheta)); //防止极限误差 -0.00000x
			//	float3 H = float3(
			//		sintheta*cos(phi),
			//		sintheta*sin(phi),
			//		costheta);
			//	H = toNormalHemisphere(H, hit.N);
			//	subRay.dir = reflect(ray.dir, H);
			//}
			//else{
			//	//type4 Importance Sample (Diffuse)
			//	//1.prepare a
			//	Material_PBR param = GetObjMaterial_PBR(hit.obj);
			//	float a = max(0.001f, r*r);
			//	//2.sample h 
			//	float x1 = rand01(seed);
			//	float x2 = rand01(seed.zxy);
			//	float r = sqrt(x1);
			//	float theta = x2 * 2 * PI;
			//	float x = r * cos(theta);
			//	float y = r * sin(theta);
			//	float z = sqrt(1 - x * x - y * y);
			//	subRay.dir = toNormalHemisphere(float3(x, y, z), hit.N);
			//}
			subRay.pos = hit.P;
			subRays[Inx3D(i, j, k)] = subRay;

			PathInfo subPath;
			subPath.hasEnd = 0;
			subPath.endInx = -1;
			subPaths[Inx3D(i, j, k)] = subPath;
		}
	}
	//######################## 
	//end
	mainRays[Inx2D(i,j)] = ray;
	mainHits[Inx2D(i, j)] = hit;
	mainPaths[Inx2D(i, j)] = path;

	float3 re = 0;
	//re = hit.N;
	re = path.hasEnd;
	//re = subRays[Inx3D(i, j, 0)].dir;
	Result[Inx_img(i, j)] = float4(re, 0);
}
//#########################################################################################################
int traceInx;
int SPP_cell;
[numthreads(CoreX, CoreY, 1)]
void TraceBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	PathInfo mainPath = mainPaths[Inx2D(i, j)];
	if (mainPath.hasEnd >= 1)
	{
		return;
	}
	HitInfo hit;
	//######################## 

	for (int k = traceInx*SPP_cell; k < (traceInx+1)*SPP_cell; k++)
	{
		PathInfo path = subPaths[Inx3D(i, j, k)];
		if (path.hasEnd == 1)
		{
			continue;
		}

		Ray ray = subRays[Inx3D(i,j,k)];
		SDFScene(ray, hit);
		//??? debug
		//if (hit.bHit == -1)
		//{
		//	Result[Inx_img(i, j)] = float4(1,0,0,0);
		//	return;
		//}
		//else if (hit.bHit == -2)
		//{
		//	Result[Inx_img(i, j)] = float4(0, 1, 0, 0);
		//	return;
		//}
		//else if (hit.bHit == -3)
		//{
		//	Result[Inx_img(i, j)] = float4(1, 0, 1, 0);
		//	return;
		//}
		if (hit.bHit <= 0)
		{
			path.hasEnd = 1;
			path.endInx = -2;
		}
		else if (rgbSum(GetObjEmissive(hit.obj)) > 0)
		{
			path.hasEnd = 1;
			path.endInx = BI;
		}
		subPaths[Inx3D(i, j, k)] = path;
		subHits[Inx4D(i, j, k, BI)] = hit;
		subRays[Inx3D(i, j, k)] = ray;
	}
	//######################## 
	float3 re = float3(0, 0, 0);
	//re = subHits[Inx4D(i, j, 0, BI)].P;
	re = subRays[Inx3D(i, j, 0)].pos;
	Result[Inx_img(i, j)] = float4(re, 0);
}
//############################################################################
[numthreads(CoreX, CoreY, 1)]
void BounceBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;
	PathInfo mainPath = mainPaths[Inx2D(i, j)];
	if (mainPath.hasEnd >= 1)
	{
		return;
	}
	//######################## 
	for (int k = 0; k < SPP; k++)
	{
		PathInfo path = subPaths[Inx3D(i, j, k)];
		if (path.hasEnd == 1)
		{
			continue;
		}
		Ray ray = subRays[Inx3D(i, j, k)];
		HitInfo hit = subHits[Inx4D(i, j, k, BI)];
		//float3 seed = hit.P + float3(i, j, k) + float3(blockX, blockY, 0);
		float3 seed = normalize(hit.P + float3(0, 0, 2.5)) + float3(i, j, k);// +float3(blockX, blockY, 0);
		{
			{
				//错误
				//float3 ref = reflect(ray.dir, hit.N);
				//Material_PBR param = GetObjMaterial_PBR(hit.obj);
				//ray.dir = normalize(randP_round(seed)*param.roughness + ref);
			}

			{
				//ray.dir = normalize(randP_round(seed) + hit.N);
			}

			{
				//float3 d1 = normalize(randP_round(seed) + hit.N); 
				//float3 d2 = reflect(ray.dir, hit.N);
				//Material_PBR param = GetObjMaterial_PBR(hit.obj);
				//ray.dir = lerp(d2, d1, param.roughness);
			}


			{
				Material_PBR param = GetObjMaterial_PBR(hit.obj);
				// “反”（辐）射度统计
				//!!!
				float r_diffuse = 1.0;
				float r_specular = (1.0 - pow(param.roughness,0.5));
				float r_sum = r_diffuse + r_specular;

				// 根据辐射度计算概率
				float p_diffuse = r_diffuse / r_sum;
				float p_specular = r_specular / r_sum;

				// 按照概率采样
				float rd = rand01(seed.zyx);
				// 漫反射
				if (rd <= p_diffuse) {
					ray.dir = normalize(randP_round(seed) + hit.N);
				}
				// 镜面反射
				else if (p_diffuse < rd && rd <= p_diffuse + p_specular) {
					float3 d1 = normalize(randP_round(seed) + hit.N); 
					float3 d2 = reflect(ray.dir, hit.N);
					Material_PBR param = GetObjMaterial_PBR(hit.obj);
					ray.dir = lerp(d2, d1, param.roughness);

					//ray.dir = normalize(randP_round(seed) + hit.N);
				}
				else
				{//!!!
					ray.dir = normalize(randP_round(seed) + hit.N);
				}
			}
		}
		subRays[Inx3D(i, j, k)] = ray;
	}
	//######################## 
	//end
	float3 re = float3(0, 0, 0);
	re = subRays[Inx3D(i, j, 0)].pos;
	//re = subHits[Inx4D(i, j, 0, BI)].P;
	Result[Inx_img(i, j)] = float4(re, 0);
}
//############################################################################

//#################################################################
Light ShadeSublight(Light light, HitInfo preHit, HitInfo hit, HitInfo nextHit, float diffuseRate=1.0f, float specularRate = 1.0f)
{
	float3 Li = GetAttenuationed(light.color, hit.P, nextHit.P);
	Material_PBR param = GetObjMaterial_PBR(hit.obj);
	float3 V = normalize(preHit.P - hit.P);
	float3 L = normalize(nextHit.P - hit.P);
	float3 c = PBR_GGX(param, hit.N, V, L, Li, diffuseRate, specularRate);

	Light re;
	//??? 反射系数
	re.color = GetObjEmissive(hit.obj) + c*0.9f;
	return re;
}

[numthreads(CoreX, CoreY, 1)]
void RenderBlock(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	PathInfo mainPath = mainPaths[Inx2D(i, j)];
	HitInfo mainHit = mainHits[Inx2D(i, j)];
	if (mainPath.hasEnd == 1)
	{
		Result[Inx_img(i, j)] = float4(1,0,1, 0);
		return;
	}
	else if (mainPath.hasEnd == 2)
	{
		float3 tt = GetObjEmissive(mainHit.obj);
		Result[Inx_img(i, j)] = float4(tt, 0);
		return;
	}

	int k = 0;
	float3 finalColor = 0;
	Ray mainRay = mainRays[Inx2D(i, j)];
	//######################## 
	Material_PBR mainParam = GetObjMaterial_PBR(mainHit.obj);
	float a = mainParam.roughness;
	a = max(0.001f, a*a);

	for (k = 0; k < SPP; k++)
	{
		Light light;
		light.color = 0;
		PathInfo path = subPaths[Inx3D(i, j, k)];
		//!!! 如果主材料不反光，忽略子ray中的高光项，算是一种对混合bounce策略带来的副作用的补偿修正
		float specularK = mainParam.roughness < 0.5 ? 1.0f : 0.0f;

		if (path.endInx <0)
		{
			continue;
		}

		for (int inx = path.endInx; inx >= 0; inx--)
		{
			HitInfo hit = subHits[Inx4D(i,j,k,inx)];
			if (inx == path.endInx)
			{
				light.color = GetObjEmissive(hit.obj);
			}
			else if (inx == 0)
			{
				HitInfo preHit = mainHits[Inx2D(i, j)];
				HitInfo nextHit = subHits[Inx4D(i, j, k, inx + 1)];
				light = ShadeSublight(light, preHit, hit, nextHit,1, specularK);

				Material_PBR subParam = GetObjMaterial_PBR(hit.obj);
			}
			else
			{
				HitInfo preHit = subHits[Inx4D(i, j, k, inx - 1)];
				HitInfo nextHit = subHits[Inx4D(i, j, k, inx + 1)];
				light = ShadeSublight(light, preHit, hit, nextHit,1, specularK);

				Material_PBR subParam = GetObjMaterial_PBR(hit.obj);
			}
		}

		{			
			HitInfo firstHit = subHits[Inx4D(i, j, k, 0)];
			float3 N = mainHit.N;
			float3 V = -mainRay.dir;
			float3 L = normalize(firstHit.P - mainHit.P);
			float3 Li = GetAttenuationed(light.color, mainHit.P, firstHit.P);

			float3 H = normalize(V + L);
			float NdotH = max(dot(N, H), 0.0);
			float NdotL = max(dot(N, L), 0.0);

			//根据辐射度决定用什么样的采样
			//https://blog.csdn.net/weixin_44176696/article/details/119988866
			// 分别计算三种 BRDF 的概率密度
			float pdf_diffuse = NdotL / PI;
			float pdf_GGX = 0;
			{
				float a = mainParam.roughness;
				a = max(0.001f, a*a);
				
				float nomi = a * a * NdotH;
				float NdotH2 = NdotH * NdotH;
				
				float denom = (NdotH2 * (a*a - 1.0) + 1.0);
				denom = PI * denom * denom;
				pdf_GGX = nomi / denom;
				pdf_GGX /= 4 * dot(L, H);	
				pdf_GGX = max(pdf_GGX, 0.001f);
			}
			float pdf_specular = pdf_GGX;//Ds * NdotH / (4.0 * dot(L, H));
			//float pdf_clearcoat = Dr * NdotH / (4.0 * dot(L, H));

			// 辐射度统计
			float r_diffuse = (1.0 - mainParam.metallic);
			float r_specular = 1.0;
			//float r_clearcoat = 0.25 * material.clearcoat;
			//float r_sum = r_diffuse + r_specular + r_clearcoat;
			//--- 临时修改：无清漆项
			float r_sum = r_diffuse + r_specular;
			//___

			// 根据辐射度计算选择某种采样方式的概率
			float p_diffuse = r_diffuse / r_sum;
			float p_specular = r_specular / r_sum;
			//float p_clearcoat = r_clearcoat / r_sum;

			// 根据概率混合 pdf
			//float pdf = p_diffuse * pdf_diffuse
			//	+ p_specular * pdf_specular
			//	+ p_clearcoat * pdf_clearcoat;
			//--- 临时修改：无清漆项
			float pdf = p_diffuse * pdf_diffuse
				+ p_specular * pdf_specular;
			//___

			pdf = max(0.001f, pdf);
			finalColor += PBR_GGX(mainParam, N, V, L, Li) / pdf;
		}
	}
	finalColor = finalColor / SPP;
	finalColor += GetObjEmissive(mainHit.obj);
	//??? 
	finalColor = pow(abs(finalColor), 1.0f / 2.2f);
	//######################## 
	//end
	float3 re = 0; 
	re = finalColor;

	Result[Inx_img(i, j)] = float4(re, 0);
}

float GetGrey(float3 c)
{
	return c.r*0.3 + c.g*0.6 + c.b*0.1;
}

void swap(inout float a, inout float b)
{
	float tt = a;
	a = b;
	b = tt;
}

void swap(inout float3 a, inout float3 b)
{
	float3 tt = a;
	a = b;
	b = tt;
}

[numthreads(CoreX, CoreY, 1)]
void Filter(uint3 id : SV_DispatchThreadID)
{
	int x = id.x;
	int y = id.y;
	float4 oriColor = Result[id.xy];
	
	float grey[9];
	float3 colors[9];
	int count = 0;
	for (int j = -1; j <= 1; j++)
	{
		for (int i = -1; i <= 1; i++)
		{
			colors[count] = Result[float2(x + i, y + j)].xyz;
			float tt = GetGrey(colors[count]);
			grey[count] = tt;
			count += 1;
		}
	}

	//希尔排序
	for (float gap = 9 / 2.0f; gap > 0; gap /= 2.0f)
	{
		for (int i = gap; i < 9; ++i) 
		{
			for (int j = i - gap; j >= 0 && grey[j] > grey[j + gap]; j -= gap)
			{
				swap(grey[j], grey[j + gap]);
				swap(colors[j], colors[j + gap]);
			}
		}
	}
		
	//######################## 
	//end
	float3 re = 0; 
	//re.yz = oriColor.yz;
	re = colors[4];
	Result[id.xy] = float4(re, 0);
}